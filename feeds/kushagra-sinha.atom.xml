<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Janus List</title><link href="http://www.j4nu5.com/" rel="alternate"></link><link href="http://www.j4nu5.com/feeds/kushagra-sinha.atom.xml" rel="self"></link><id>http://www.j4nu5.com/</id><updated>2014-11-16T00:00:00+05:30</updated><entry><title>Implementing Service Oriented Architecture (SOA) using HTTP is a horrible idea</title><link href="http://www.j4nu5.com/implementing-service-oriented-architecture-soa-using-http-is-a-horrible-idea.html" rel="alternate"></link><updated>2014-11-16T00:00:00+05:30</updated><author><name>Kushagra Sinha</name></author><id>tag:www.j4nu5.com,2014-11-16:implementing-service-oriented-architecture-soa-using-http-is-a-horrible-idea.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Service-oriented_architecture"&gt;Service Oriented Architecture&lt;/a&gt;
is a commonly used design pattern in distributed and enterprise applications.
It involves the creation and use of independent &lt;em&gt;services&lt;/em&gt; that work together
to produce the desired result. The most important benefits, of course, are
separation of concerns and the ability to scale each service independent of
others, leading to a clean, modular&amp;nbsp;design.&lt;/p&gt;
&lt;p&gt;A common problem faced during the design of a &lt;span class="caps"&gt;SOA&lt;/span&gt; system is the choice of
communication protocol. Ideally we want our services to communicate with each
other with minimum communication overhead. This&amp;nbsp;involves:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Low&amp;nbsp;latency&lt;/li&gt;
&lt;li&gt;High&amp;nbsp;throughput&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many open source protocols are available for use in &lt;span class="caps"&gt;SOA&lt;/span&gt;. Some of them also
provide client/server de-serialization/serialization libraries to make your job
easier. Examples&amp;nbsp;are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developers.google.com/protocol-buffers/"&gt;Protocol&amp;nbsp;Buffers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://thrift.apache.org/"&gt;Apache&amp;nbsp;Thrift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://avro.apache.org/"&gt;Apache&amp;nbsp;Avro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some people also like to use &lt;span class="caps"&gt;SOAP&lt;/span&gt;, &lt;span class="caps"&gt;XML&lt;/span&gt;-&lt;span class="caps"&gt;RPC&lt;/span&gt;, &lt;span class="caps"&gt;JSON&lt;/span&gt;-&lt;span class="caps"&gt;RPC&lt;/span&gt; etc. I have attempted to
cover the (mis)use of &lt;span class="caps"&gt;HTTP&lt;/span&gt;/&lt;span class="caps"&gt;REST&lt;/span&gt; as a &lt;span class="caps"&gt;SOA&lt;/span&gt; protocol in this&amp;nbsp;article.&lt;/p&gt;
&lt;p&gt;Consider 2 clients accessing a web front-end for some data. The web frontend
server is responsible for some preprocessing (authentication etc.) and
post-processing (aggregation etc.) tasks. The heavy lifting is done by our
backend&amp;nbsp;service.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SOA-Image" src="http://www.j4nu5.com/images/soa.png" /&gt;&lt;/p&gt;
&lt;p&gt;Let us say Client1 came first and requested for Data1. The web frontend
performs some preprocessing on the request and forwards it to our backend
service over &lt;span class="caps"&gt;HTTP&lt;/span&gt;. Meanwhile Client2 came along and requested for Data2. Now,
if our backend service has not yet returned with Client1&amp;#8217;s request, the web
frontend cannot re-use(multiplex) the &lt;span class="caps"&gt;TCP&lt;/span&gt; connection between itself and our
backend service. It will need to create a new &lt;span class="caps"&gt;TCP&lt;/span&gt; connection for each
concurrent request which is extremely wasteful.
&lt;a class="reference external" href="http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft2"&gt;&lt;span class="caps"&gt;SPDY&lt;/span&gt;&lt;/a&gt; has
tried to address the multiplexing issue but it may be a bit away from
production grade quality&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;Another problem is &lt;span class="caps"&gt;HTTP&lt;/span&gt;/1.1&amp;#8217;s use of &lt;span class="caps"&gt;ASCII&lt;/span&gt;. Sure it makes things easier to
debug but again is wasteful in &lt;span class="caps"&gt;SOA&lt;/span&gt;. Ideally we want a tightly packed binary&amp;nbsp;protocol.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt;/1.1&amp;#8217;s statelessness is another cause of worries. It is simply wasteful
to send the same set of headers for similar requests. Again, &lt;span class="caps"&gt;SPDY&lt;/span&gt; and &lt;span class="caps"&gt;HTTP&lt;/span&gt;/2.0
are trying header compression and may be worth
&lt;a class="reference external" href="http://chimera.labs.oreilly.com/books/1230000000545/ch12.html#HTTP2_HEADER_COMPRESSION"&gt;looking into&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt;/1.1 is an excellent protocol for a traditional client/server model. It is
an &lt;span class="caps"&gt;ASCII&lt;/span&gt; protocol, hence it is easy to debug. It is fairly well known, has a
number of supporting libraries in almost all major languages and provides a
useful set of primitives and verbs for almost all of your data transfer needs.
However, please do not use it if you are creating a production grade &lt;span class="caps"&gt;SOA&lt;/span&gt;&amp;nbsp;application.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="programming"></category><category term="infrastructure"></category></entry><entry><title>The toughest interview question</title><link href="http://www.j4nu5.com/the-toughest-interview-question.html" rel="alternate"></link><updated>2014-07-29T00:00:00+05:30</updated><author><name>Kushagra Sinha</name></author><id>tag:www.j4nu5.com,2014-07-29:the-toughest-interview-question.html</id><summary type="html">&lt;p&gt;What is the output of the following C code&amp;nbsp;snippet?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d %d %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a tricky question. Any attempt to answer this question requires either
a deep understanding of your compiler&amp;#8217;s parser or a complete ignorance of C.
Even if you fall under the first category and know the ins and outs of your
favorite compiler, how do you know which is your &lt;em&gt;interviewer&amp;#8217;s&lt;/em&gt; favorite&amp;nbsp;compiler?&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;ANSI&lt;/span&gt; C language specification, you see, specifies neither the evaluation
order of function arguments nor the exact &lt;em&gt;side effect&lt;/em&gt; evaluation time of
prefix and postfix operators. The answer to the above problem depends on the
compiler being&amp;nbsp;used.&lt;/p&gt;
&lt;p&gt;Unfortunately, these kinds of puzzles form the bulk of programming interview
questions for &lt;span class="caps"&gt;IT&lt;/span&gt; companies in India. They are even common in term papers in&amp;nbsp;colleges.&lt;/p&gt;
&lt;p&gt;I could never fathom the utility of such questions. The correct answer,
&lt;em&gt;Depends on the compiler&lt;/em&gt; is &lt;em&gt;never&lt;/em&gt; an option for this question. What am I
supposed to do with this? Should I just evaluate from left to right and
calculate the side effects &lt;span class="caps"&gt;ASAP&lt;/span&gt; or should I try to second guess my interviewer
and assume that he/she is terribly confused by the C function call stack
convention and thinks that the compiler always evaluates from right to&amp;nbsp;left?&lt;/p&gt;
&lt;p&gt;One day I chanced upon a book that actually taught that C compilers evaluate
function arguments from right to left. This gem of a book is quite famous in
India. Its called &lt;em&gt;Let Us C&lt;/em&gt;, written by the renowned
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Yashavant_Kanetkar"&gt;Yashwant Kanetkar&lt;/a&gt;, who
according to his Wikipedia&amp;nbsp;page,&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot; &amp;#8230; has created, moulded and groomed many &lt;span class="caps"&gt;IT&lt;/span&gt; professionals in the last decade and half.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;How poetic&amp;nbsp;&amp;#8230;&lt;/p&gt;
&lt;p&gt;If there is a single most important factor behind the stagnation of the Indian
&lt;span class="caps"&gt;IT&lt;/span&gt; industry, I think it is this book. Forget about complying to &lt;span class="caps"&gt;ANSI&lt;/span&gt; C
standards, it professes and quizzes on the areas of C that have deliberately
been left to the compiler. Professors and interviewers who unfortunately never
got a chance to study &lt;em&gt;K&amp;amp;R C&lt;/em&gt; think of &lt;em&gt;Let Us C&lt;/em&gt; as &lt;em&gt;the&lt;/em&gt; authority on the C
programming language. Most of their questions are a straight copy-paste from
this&amp;nbsp;book.&lt;/p&gt;
&lt;p&gt;This is a sad state of affairs. Mainly because the people who &lt;em&gt;actually&lt;/em&gt; know
C are &lt;em&gt;never&lt;/em&gt; able to answer this question correctly. If you are one of them,
Congrats! You are on the right path towards mastering&amp;nbsp;C.&lt;/p&gt;
</summary><category term="programming"></category><category term="interviews"></category></entry><entry><title>In search of the perfect blogging platform</title><link href="http://www.j4nu5.com/in-search-of-the-perfect-blogging-platform.html" rel="alternate"></link><updated>2014-07-23T00:00:00+05:30</updated><author><name>Kushagra Sinha</name></author><id>tag:www.j4nu5.com,2014-07-23:in-search-of-the-perfect-blogging-platform.html</id><summary type="html">&lt;p&gt;What makes a good blogging&amp;nbsp;platform?&lt;/p&gt;
&lt;p&gt;Leaving the tech details, feature lists and other bells and whistles
aside, a good blogging platform&amp;#8217;s primary aim is&amp;nbsp;twofold:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Make blogging enjoyable. Entice the blogger into writing more&amp;nbsp;articles.&lt;/li&gt;
&lt;li&gt;Make reading enjoyable. The output of the blogging platform should be easy
to consume. A good support for themes and customizations is a&amp;nbsp;must.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I had been using &lt;a class="reference external" href="https://github.com/rigoneri/syte"&gt;Syte&lt;/a&gt; as my hompage.
&lt;a class="reference external" href="https://www.tumblr.com/"&gt;Tumblr&lt;/a&gt; was the underlying blogging platform and
the whole thing was hosted on &lt;a class="reference external" href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;. As it turns
out, all three of my aforementioned choices were suboptimal as far as my
blogging requirements were&amp;nbsp;considered.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Syte was difficult to configure. I am neither a designer nor a front-end
developer. Therefore it just lay stagnant, with the default&amp;nbsp;theme.&lt;/li&gt;
&lt;li&gt;Tumblr was not a good choice for a tech blog. Writing and highlighting code
snippets is painful. Especially with a language like python, which uses
indentation for denoting scope and one incorrect word-wrap in your theme
can ruin the snippet. As it turns out, I churned out exactly two articles
during my time on Tumblr. It is a great platform for other things, not for a
tech blog in my humble&amp;nbsp;opinion.&lt;/li&gt;
&lt;li&gt;Though Heroku takes a lot of pain out of hosting your blog, it is far from
ideal. I had to shift my site because I received a dreaded &lt;em&gt;Application Error&lt;/em&gt;
from Heroku. I had not looked into my site for a &lt;em&gt;very&lt;/em&gt; long time and did
not want to&amp;nbsp;investigate.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A culmination of these problems forced me to look for alternatives. Thankfully,
I stumbled on &lt;a class="reference external" href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;. I cannot recommend
them more. The setup is absolutely simple and your blog/site can be up and
running in no&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;However, I faced a few problems with &lt;a class="reference external" href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;. Since,
it is based on Ruby, its installation was a nightmare for me due to the myriad
dependency management issues in Ruby. I naively tried
&lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; but later came to know that it was based
on Jekyll. (As a side, the dependency hell was primarily due to
&lt;a class="reference external" href="http://bundler.io/blog/2014/07/16/bundler-api-outages.html"&gt;Bundler &lt;span class="caps"&gt;API&lt;/span&gt; outages&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;By this time, I had become really interested in the idea of static site
generators. Being a python fan, I searched for a python based solution and
found &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;. It is fast, has good support
for themes and integrates with GitHub Pages with minimal effort from one&amp;#8217;s&amp;nbsp;side.&lt;/p&gt;
&lt;p&gt;The results of half a day of hacking is this&amp;nbsp;blog.&lt;/p&gt;
&lt;p&gt;Thanks for reading. Comments are&amp;nbsp;welcome.&lt;/p&gt;
</summary><category term="musings"></category><category term="misc"></category></entry><entry><title>Abstract Classes and Factory Design Pattern in Python</title><link href="http://www.j4nu5.com/abstract-classes-and-factory-design-pattern-in-python.html" rel="alternate"></link><updated>2013-12-19T00:00:00+05:30</updated><author><name>Kushagra Sinha</name></author><id>tag:www.j4nu5.com,2013-12-19:abstract-classes-and-factory-design-pattern-in-python.html</id><summary type="html">&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Class_(computer_programming)#Abstract_and_concrete"&gt;Abstract Classes&lt;/a&gt;
are one of the most useful and important concepts in Object Oriented
Programming. I&amp;#8217;ll attempt to illustrate their usefulness, and their usage in
Python 2.7 with the following (seemingly contrived)&amp;nbsp;example:&lt;/p&gt;
&lt;p&gt;Let us say, you want/have to implement posting updates on Facebook using
Python. Your code might look something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Attempt 0: Bad code.&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;facebook_share_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Initialize OAuth with facebook&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;share_on_facebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Post to Facebook&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works and everyone is happy. Then one day, you decide to support posting
tweets in your application. You add the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;twitter_share_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Initialize OAuth with twitter&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;share_on_twitter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Post to Twitter&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the part of your code which has to figure out the appropriate sharing
function to call might look something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;requested_sharing_platform&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;facebook&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;facebook_share_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;share_on_facebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;requested_sharing_platform&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;twitter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;twitter_share_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;share_on_twitter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Things quickly become complicated when you have to implement Google+ sharing
for example and you add two more functions and another couple of lines to the
if-elif&amp;nbsp;chain.&lt;/p&gt;
&lt;p&gt;The real fun starts however when someone else in your team decides to
copy-paste your if-elif chain and 10 days later, when you implement LinkedIn
sharing, you expand your if-elif chain, but not your colleague&amp;#8217;s, leading to
all kinds of&amp;nbsp;problems.&lt;/p&gt;
&lt;p&gt;The above problem can be neatly solved using Abstract Classes
(and the Factory&amp;nbsp;Pattern).&lt;/p&gt;
&lt;p&gt;A good rule of thumb in &lt;span class="caps"&gt;OOP&lt;/span&gt; is to &amp;#8220;program to an interface, not an
implementation&amp;#8221;. What this means is to create an abstraction over related
objects, that enforces a contract between the caller and the callee. For
example, consider set of classes called Cat, Lion and Dog. A cat meows, dog
barks and lion roars. But we may see these as special cases of an abstraction
called speak, which translates to roaring for lions and barking for dogs. Our
class definitions may look&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c"&gt;# Meow&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c"&gt;# Bark&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Lion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c"&gt;# Roar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem with the above approach is that it is not enforcing. We can easily
create a class&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Callers of Cat, Dog or Lion can call the speak method without any problem but
calls to speak method of Fish instances will be delegated to the superclass,
which might be a problem in real life examples. Ideally we would want users of
our abstraction to have an iron clad contractual obligation with respect to
the methods that we have exposed. This is where abstract classes come&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;Python originally did not have support for abstract classes and some people
still consider them to be unpythonic. Python has decided to take the middle
path on this (see &lt;span class="caps"&gt;PEP&lt;/span&gt; 3119) and has added support for abstract classes using
the abc module, but has not changed the core syntax of the&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;Here is how our original problem of social sharing can be solved using abstract&amp;nbsp;classes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AbstractSocialShare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ABCMeta&lt;/span&gt;

    &lt;span class="nd"&gt;@abc.abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="nd"&gt;@abc.abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;share&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FacebookShare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractSocialShare&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# Initialize Facebook OAuth&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;share&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# Share on Facebook&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TwitterShare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractSocialShare&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# Initialize Twitter OAuth&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;share&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# Share on Twitter&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Try creating an object of the abstract class&amp;nbsp;with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AbstractSocialShare&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will receive a&amp;nbsp;TypeError.&lt;/p&gt;
&lt;p&gt;Now try creating and instantiating this&amp;nbsp;class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IncorrectShare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractSocialShare&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since IncorrectShare has not implemented the share method, we will not be able to instantiate&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;How do we take care of the ugly if-elif chain? Thats where the Factory pattern comes&amp;nbsp;in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SocialShareFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__share_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;facebook&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FacebookShare&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;twitter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TwitterShare&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_share_obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="n"&gt;share_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SocialShareFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__share_classes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;share_class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;share_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The requested sharing has not been implemented&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The usage will be something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SocialShareFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_share_obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;facebook&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Something&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Python is an interpreted language which supports and encourages duck typing. Abstract classes may seem superficial in such a language but as I have attempted to illustrate above, they vastly improve code maintainability and&amp;nbsp;reuse.&lt;/p&gt;
&lt;p&gt;Comments are&amp;nbsp;welcome!&lt;/p&gt;</summary><category term="python"></category><category term="programming"></category></entry><entry><title>New Year Resolutions and Nostalgia</title><link href="http://www.j4nu5.com/new-year-resolutions-and-nostalgia.html" rel="alternate"></link><updated>2013-01-01T00:00:00+05:30</updated><author><name>Kushagra Sinha</name></author><id>tag:www.j4nu5.com,2013-01-01:new-year-resolutions-and-nostalgia.html</id><summary type="html">&lt;p&gt;I was going through this &lt;a href="http://mitadmissions.org/blogs/entry/50_things"&gt;link&lt;/a&gt; today when I could not help but feel an
overwhelming sense of sadness and&amp;nbsp;incompleteness.&lt;/p&gt;
&lt;p&gt;I will be graduating in May, 2013 from the Indian Institute of Technology,
Varanasi. The best 4 years of my life already behind me. As I was going
through this list, I found a lot of things I wish I could have done, many
others I wish I had done in a better fashion and many still that I have to&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;One of the things, though not on the above list has been this blog, which I had
been procrastinating about for nearly a couple of years. So, here goes nothing&amp;nbsp;&amp;#8230;&lt;/p&gt;
&lt;p&gt;Hope to start this New Year with resolutions and promises&amp;nbsp;fulfilled.&lt;/p&gt;
&lt;p&gt;Thanks for&amp;nbsp;reading!&lt;/p&gt;</summary><category term="new year resolutions"></category><category term="nostalgia"></category></entry></feed>