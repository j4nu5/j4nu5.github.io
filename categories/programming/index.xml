<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on The Janus List</title>
    <link>https://sinhak.dev/categories/programming/</link>
    <description>Recent content in Programming on The Janus List</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Sep 2018 18:24:40 +0200</lastBuildDate>
    <atom:link href="https://sinhak.dev/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Const References to Temporary Objects</title>
      <link>https://sinhak.dev/posts/const-reference-to-temporary-objects/</link>
      <pubDate>Sun, 02 Sep 2018 18:24:40 +0200</pubDate>
      <guid>https://sinhak.dev/posts/const-reference-to-temporary-objects/</guid>
      <description>&lt;p&gt;Consider the following code snippet:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&#xA;&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; GetInt() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; x = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; main() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;&#34;&gt;int&lt;/span&gt;&amp;amp; x = GetInt();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;In particular, pay attention to line #9. Is it guaranteed to be safe?&lt;/p&gt;</description>
    </item>
    <item>
      <title>USACO setup</title>
      <link>https://sinhak.dev/posts/usaco-setup/</link>
      <pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate>
      <guid>https://sinhak.dev/posts/usaco-setup/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.usaco.org/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;USACO&lt;/a&gt; is fun. Though it is fairly easy to get up&#xA;and running on the platform, there remain a few repetitive steps during&#xA;problem solving that can be automated. Here is a brief summary of my&#xA;automation steps:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Use a template. Here is mine. Save it as &lt;em&gt;template.cpp&lt;/em&gt;:&#xA;&lt;script src=&#34;https://gist.github.com/j4nu5/d2b23dcdc20c9de48715.js?file=usaco_template.cpp&#34;&gt;&lt;/script&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Save this script as &lt;em&gt;solve.sh&lt;/em&gt; in the same directory as above:&#xA;&lt;script src=&#34;https://gist.github.com/j4nu5/55005626c282e056b753.js?file=usaco_solve.sh&#34;&gt;&lt;/script&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;All done!&#xA;Whenever you&amp;rsquo;re ready to begin coding a solution, simply execute&#xA;&lt;code&gt;./solve.sh PROBLEM_NAME&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;All the best!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello USACO</title>
      <link>https://sinhak.dev/posts/hello_usaco/</link>
      <pubDate>Sun, 27 Mar 2016 00:00:00 +0000</pubDate>
      <guid>https://sinhak.dev/posts/hello_usaco/</guid>
      <description>&lt;p&gt;I love competitive programming. I love the anticipation while I wait with my&#xA;fingers crossed after submitting a solution. And the rush that follows after&#xA;getting an &amp;lsquo;AC&amp;rsquo;.&lt;/p&gt;&#xA;&lt;p&gt;After stagnating near the 60-70th percentile for eons, I have decided to&#xA;dedicate focused practice time for competitive programming. The next series&#xA;of blog posts will track my journey through &lt;a href=&#34;http://www.usaco.org/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;USACO&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;All the best to me!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Facebook Hacker Cup 2015 Qualification Round Solutions</title>
      <link>https://sinhak.dev/posts/facebook-hackercup-2015-qualifications/</link>
      <pubDate>Mon, 12 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://sinhak.dev/posts/facebook-hackercup-2015-qualifications/</guid>
      <description>&lt;p&gt;Facebook recently organized the qualification round of Hacker Cup 2015. They&#xA;posed some interesting problems and anyone who could get at least one problem&#xA;right can move to the next round.&lt;/p&gt;&#xA;&lt;p&gt;I managed to get a rank of 217, with a perfect score of 100. I have posted my&#xA;solutions below with a little bit of commentary. You can access the problems&#xA;&lt;a href=&#34;https://www.facebook.com/hackercup/problems.php?round=742632349177460&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;cooking-the-books-15-points&#34;&gt;&#xA;  Cooking the Books (15 points)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cooking-the-books-15-points&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This was the easiest question. Since the constraints were so small, it suffices&#xA;to use brute force and try all possible swaps. Care has to be taken however to&#xA;make sure that a number never starts with 0.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generating Power Set</title>
      <link>https://sinhak.dev/posts/generating-power-set/</link>
      <pubDate>Mon, 05 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://sinhak.dev/posts/generating-power-set/</guid>
      <description>&lt;p&gt;Iterating over all possible subsets of a set is a problem that can arise not&#xA;only in competitive programming but also in day-to-day programming. While the&#xA;total number of possible subsets is quite huge (&lt;em&gt;2^n&lt;/em&gt; where &lt;em&gt;n&lt;/em&gt; is the&#xA;cardinality of the input set), often we want an algorithm that systematically&#xA;considers all subsets for small values of &lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;A &lt;a href=&#34;http://en.wikipedia.org/wiki/Power_set&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;power set&lt;/a&gt; is a set of all subsets&#xA;of a given input set. Often we may want to simply iterate over all members of&#xA;the power set, but sometimes (if we have enough memory) we may need the power&#xA;set itself. In the following post, I have attempted to present some algorithms&#xA;(with C++11 implementations) that solve both kinds of problems (simple&#xA;iteration and complete power set construction).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Implementing Service Oriented Architecture using Http is a horrible idea</title>
      <link>https://sinhak.dev/posts/soa-using-http-considered-harmful/</link>
      <pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate>
      <guid>https://sinhak.dev/posts/soa-using-http-considered-harmful/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Service-oriented_architecture&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Service Oriented Architecture&lt;/a&gt;&#xA;is a commonly used design pattern in distributed and enterprise applications.&#xA;It involves the creation and use of independent &lt;em&gt;services&lt;/em&gt; that work together&#xA;to produce the desired result. The most important benefits, of course, are&#xA;separation of concerns and the ability to scale each service independent of&#xA;others, leading to a clean, modular design.&lt;/p&gt;&#xA;&lt;p&gt;A common problem faced during the design of a SOA system is the choice of&#xA;communication protocol. Ideally we want our services to communicate with each&#xA;other with minimum communication overhead. This involves:&lt;/p&gt;</description>
    </item>
    <item>
      <title>The toughest interview question</title>
      <link>https://sinhak.dev/posts/the-toughest-interview-question/</link>
      <pubDate>Tue, 29 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://sinhak.dev/posts/the-toughest-interview-question/</guid>
      <description>&lt;p&gt;What is the output of the following C code snippet?&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&#xA;&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; n = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;printf(&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;%d %d %d&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;, n++, ++n, n++ + ++n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;This is a tricky question. Any attempt to answer this question requires either&#xA;a deep understanding of your compiler&amp;rsquo;s parser or a complete ignorance of C.&#xA;Even if you fall under the first category and know the ins and outs of your&#xA;favorite compiler, how do you know which is your &lt;em&gt;interviewer&amp;rsquo;s&lt;/em&gt; favorite&#xA;compiler?&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
