<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on The Janus List</title>
    <link>https://www.j4nu5.com/posts/</link>
    <description>Recent content in Posts on The Janus List</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Oct 2020 19:03:13 +0200</lastBuildDate><atom:link href="https://www.j4nu5.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Reliable Engineer</title>
      <link>https://www.j4nu5.com/posts/the-reliable-engineer/</link>
      <pubDate>Sat, 10 Oct 2020 19:03:13 +0200</pubDate>
      
      <guid>https://www.j4nu5.com/posts/the-reliable-engineer/</guid>
      <description>What is Reliability? One of the lenses through which I view my job is as a service that I provide to my immediate manager. This is different from any additional obligations that I may have to my employer.
From this lens, I want to provide such a quality of service where my manager is able to assign a task to me, and forget about it.
The extent to which I can meet this bar, is reliability.</description>
    </item>
    
    <item>
      <title>Const References to Temporary Objects</title>
      <link>https://www.j4nu5.com/posts/const-reference-to-temporary-objects/</link>
      <pubDate>Sun, 02 Sep 2018 18:24:40 +0200</pubDate>
      
      <guid>https://www.j4nu5.com/posts/const-reference-to-temporary-objects/</guid>
      <description>Consider the following code snippet:
1 2 3 4 5 6 7 8 9 10 11 12  #include &amp;lt;iostream&amp;gt; int GetInt() { int x = 1; return x; } int main() { const int&amp;amp; x = GetInt(); std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; return 0; }   In particular, pay attention to line #9. Is it guaranteed to be safe?
In this case, the answer is yes. The C++ standard guarantees that binding a temporary to a const reference on the stack, extends the lifetime of the temporary to the lifetime of the const reference.</description>
    </item>
    
    <item>
      <title>Pelican Setup</title>
      <link>https://www.j4nu5.com/posts/pelican-setup/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0200</pubDate>
      
      <guid>https://www.j4nu5.com/posts/pelican-setup/</guid>
      <description>Install Pelican:
1  sudo -H pip install pelican Markdown typogrify   Install Pelican themes
1 2 3  git clone --recursive https://github.com/getpelican/pelican-themes sudo /usr/local/bin/pelican-themes --install pelican-themes/Flex sudo chmod 755 /usr/local/lib/python2.7/dist-packages/pelican/themes/Flex   Install Pelican plugins
1  git clone --recursive https://github.com/getpelican/pelican-plugins   Fetch blog sources
1 2 3 4  git clone git@github.com:j4nu5/j4nu5.github.io.git cd j4nu5.github.io.git git fetch git checkout source   Setup for development
1  mkdir cache output   Verify plugins root</description>
    </item>
    
    <item>
      <title>USACO setup</title>
      <link>https://www.j4nu5.com/posts/usaco-setup/</link>
      <pubDate>Mon, 28 Mar 2016 00:00:00 +0200</pubDate>
      
      <guid>https://www.j4nu5.com/posts/usaco-setup/</guid>
      <description>USACO is fun. Though it is fairly easy to get up and running on the platform, there remain a few repetitive steps during problem solving that can be automated. Here is a brief summary of my automation steps:
 Use a template. Here is mine. Save it as template.cpp:   Save this script as solve.sh in the same directory as above:   All done! Whenever you&amp;rsquo;re ready to begin coding a solution, simply execute .</description>
    </item>
    
    <item>
      <title>Hello USACO</title>
      <link>https://www.j4nu5.com/posts/hello_usaco/</link>
      <pubDate>Sun, 27 Mar 2016 00:00:00 +0100</pubDate>
      
      <guid>https://www.j4nu5.com/posts/hello_usaco/</guid>
      <description>I love competitive programming. I love the anticipation while I wait with my fingers crossed after submitting a solution. And the rush that follows after getting an &amp;lsquo;AC&amp;rsquo;.
After stagnating near the 60-70th percentile for eons, I have decided to dedicate focused practice time for competitive programming. The next series of blog posts will track my journey through USACO.
All the best to me!</description>
    </item>
    
    <item>
      <title>Facebook Hacker Cup 2015 Qualification Round Solutions</title>
      <link>https://www.j4nu5.com/posts/facebook-hackercup-2015-qualifications/</link>
      <pubDate>Mon, 12 Jan 2015 00:00:00 +0100</pubDate>
      
      <guid>https://www.j4nu5.com/posts/facebook-hackercup-2015-qualifications/</guid>
      <description>Facebook recently organized the qualification round of Hacker Cup 2015. They posed some interesting problems and anyone who could get at least one problem right can move to the next round.
I managed to get a rank of 217, with a perfect score of 100. I have posted my solutions below with a little bit of commentary. You can access the problems here.
Cooking the Books (15 points) This was the easiest question.</description>
    </item>
    
    <item>
      <title>Generating Power Set</title>
      <link>https://www.j4nu5.com/posts/generating-power-set/</link>
      <pubDate>Mon, 05 Jan 2015 00:00:00 +0100</pubDate>
      
      <guid>https://www.j4nu5.com/posts/generating-power-set/</guid>
      <description>Iterating over all possible subsets of a set is a problem that can arise not only in competitive programming but also in day-to-day programming. While the total number of possible subsets is quite huge (2^n where n is the cardinality of the input set), often we want an algorithm that systematically considers all subsets for small values of n.
A power set is a set of all subsets of a given input set.</description>
    </item>
    
    <item>
      <title>Implementing Service Oriented Architecture using Http is a horrible idea</title>
      <link>https://www.j4nu5.com/posts/soa-using-http-considered-harmful/</link>
      <pubDate>Sun, 16 Nov 2014 00:00:00 +0100</pubDate>
      
      <guid>https://www.j4nu5.com/posts/soa-using-http-considered-harmful/</guid>
      <description>Service Oriented Architecture is a commonly used design pattern in distributed and enterprise applications. It involves the creation and use of independent services that work together to produce the desired result. The most important benefits, of course, are separation of concerns and the ability to scale each service independent of others, leading to a clean, modular design.
A common problem faced during the design of a SOA system is the choice of communication protocol.</description>
    </item>
    
    <item>
      <title>The toughest interview question</title>
      <link>https://www.j4nu5.com/posts/the-toughest-interview-question/</link>
      <pubDate>Tue, 29 Jul 2014 00:00:00 +0200</pubDate>
      
      <guid>https://www.j4nu5.com/posts/the-toughest-interview-question/</guid>
      <description>What is the output of the following C code snippet?
1 2  int n = 1; printf(&amp;#34;%d %d %d\n&amp;#34;, n++, ++n, n++ + ++n);   This is a tricky question. Any attempt to answer this question requires either a deep understanding of your compiler&amp;rsquo;s parser or a complete ignorance of C. Even if you fall under the first category and know the ins and outs of your favorite compiler, how do you know which is your interviewer&amp;rsquo;s favorite compiler?</description>
    </item>
    
    <item>
      <title>In search of the perfect blogging platform</title>
      <link>https://www.j4nu5.com/posts/in-search-of-the-perfect-blogging-platform/</link>
      <pubDate>Wed, 23 Jul 2014 00:00:00 +0200</pubDate>
      
      <guid>https://www.j4nu5.com/posts/in-search-of-the-perfect-blogging-platform/</guid>
      <description>What makes a good blogging platform?
Leaving the tech details, feature lists and other bells and whistles aside, a good blogging platform&amp;rsquo;s primary aim is twofold:
 Make blogging enjoyable. Entice the blogger into writing more articles. Make reading enjoyable. The output of the blogging platform should be easy to consume. A good support for themes and customization is a must.  I had been using Syte as my homepage. Tumblr was the underlying blogging platform and the whole thing was hosted on Heroku.</description>
    </item>
    
    <item>
      <title>Abstract Classes and Factory Design Pattern in Python</title>
      <link>https://www.j4nu5.com/posts/abstract-classes-and-factory-design-pattern-in-python/</link>
      <pubDate>Thu, 19 Dec 2013 00:00:00 +0100</pubDate>
      
      <guid>https://www.j4nu5.com/posts/abstract-classes-and-factory-design-pattern-in-python/</guid>
      <description>Abstract Classes are one of the most useful and important concepts in Object Oriented Programming. I&amp;rsquo;ll attempt to illustrate their usefulness, and their usage in Python 2.7 with the following (seemingly contrived) example:
Let us say, you want/have to implement posting updates on Facebook using Python. Your code might look something like this:
1 2 3 4 5 6 7 8 9  # Attempt 0: Bad code. def facebook_share_init(*args, **kwargs): # Initialize OAuth with facebook # .</description>
    </item>
    
    <item>
      <title>New Year Resolutions and Nostalgia</title>
      <link>https://www.j4nu5.com/posts/new-year-resolutions-and-nostalgia/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0100</pubDate>
      
      <guid>https://www.j4nu5.com/posts/new-year-resolutions-and-nostalgia/</guid>
      <description>I was going through this link today when I could not help but feel an overwhelming sense of sadness and incompleteness.
I will be graduating in May, 2013 from the Indian Institute of Technology, Varanasi. The best 4 years of my life already behind me. As I was going through this list, I found a lot of things I wish I could have done, many others I wish I had done in a better fashion and many still that I have to do.</description>
    </item>
    
  </channel>
</rss>
