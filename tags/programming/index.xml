<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on The Janus List</title><link>https://sinhak.dev/tags/programming/</link><description>Recent content in Programming on The Janus List</description><generator>Hugo</generator><language>en-us</language><copyright>Â© Kushagra Sinha</copyright><lastBuildDate>Sun, 02 Sep 2018 18:24:40 +0200</lastBuildDate><atom:link href="https://sinhak.dev/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Const References to Temporary Objects</title><link>https://sinhak.dev/posts/const-reference-to-temporary-objects/</link><pubDate>Sun, 02 Sep 2018 18:24:40 +0200</pubDate><guid>https://sinhak.dev/posts/const-reference-to-temporary-objects/</guid><description>&lt;p>Consider the following code snippet:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#include&lt;/span> &lt;span style="color:#8ec07c;font-style:italic">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#8ec07c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>&lt;span style="color:#8ec07c">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>&lt;span style="color:#fabd2f">int&lt;/span> &lt;span style="color:#fabd2f">GetInt&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span> &lt;span style="color:#fabd2f">int&lt;/span> x &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span> &lt;span style="color:#fe8019">return&lt;/span> x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>&lt;span style="color:#fabd2f">int&lt;/span> &lt;span style="color:#fabd2f">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span> &lt;span style="color:#fe8019">const&lt;/span> &lt;span style="color:#fabd2f">int&lt;/span>&lt;span style="color:#fe8019">&amp;amp;&lt;/span> x &lt;span style="color:#fe8019">=&lt;/span> GetInt();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span> std&lt;span style="color:#fe8019">::&lt;/span>cout &lt;span style="color:#fe8019">&amp;lt;&amp;lt;&lt;/span> x &lt;span style="color:#fe8019">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#fe8019">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span> &lt;span style="color:#fe8019">return&lt;/span> &lt;span style="color:#d3869b">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In particular, pay attention to line #9. Is it guaranteed to be safe?&lt;/p></description></item><item><title>USACO setup</title><link>https://sinhak.dev/posts/usaco-setup/</link><pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate><guid>https://sinhak.dev/posts/usaco-setup/</guid><description>&lt;p>&lt;a href="http://www.usaco.org/">USACO&lt;/a> is fun. Though it is fairly easy to get up
and running on the platform, there remain a few repetitive steps during
problem solving that can be automated. Here is a brief summary of my
automation steps:&lt;/p>
&lt;ol>
&lt;li>Use a template. Here is mine. Save it as &lt;em>template.cpp&lt;/em>:
&lt;script src="https://gist.github.com/j4nu5/d2b23dcdc20c9de48715.js?file=usaco_template.cpp">&lt;/script>
&lt;/li>
&lt;li>Save this script as &lt;em>solve.sh&lt;/em> in the same directory as above:
&lt;script src="https://gist.github.com/j4nu5/55005626c282e056b753.js?file=usaco_solve.sh">&lt;/script>
&lt;/li>
&lt;li>All done!
Whenever you&amp;rsquo;re ready to begin coding a solution, simply execute
&lt;code>./solve.sh PROBLEM_NAME&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>All the best!&lt;/p></description></item><item><title>Hello USACO</title><link>https://sinhak.dev/posts/hello_usaco/</link><pubDate>Sun, 27 Mar 2016 00:00:00 +0000</pubDate><guid>https://sinhak.dev/posts/hello_usaco/</guid><description>&lt;p>I love competitive programming. I love the anticipation while I wait with my
fingers crossed after submitting a solution. And the rush that follows after
getting an &amp;lsquo;AC&amp;rsquo;.&lt;/p>
&lt;p>After stagnating near the 60-70th percentile for eons, I have decided to
dedicate focused practice time for competitive programming. The next series
of blog posts will track my journey through &lt;a href="http://www.usaco.org/">USACO&lt;/a>.&lt;/p>
&lt;p>All the best to me!&lt;/p></description></item><item><title>Facebook Hacker Cup 2015 Qualification Round Solutions</title><link>https://sinhak.dev/posts/facebook-hackercup-2015-qualifications/</link><pubDate>Mon, 12 Jan 2015 00:00:00 +0000</pubDate><guid>https://sinhak.dev/posts/facebook-hackercup-2015-qualifications/</guid><description>&lt;p>Facebook recently organized the qualification round of Hacker Cup 2015. They
posed some interesting problems and anyone who could get at least one problem
right can move to the next round.&lt;/p>
&lt;p>I managed to get a rank of 217, with a perfect score of 100. I have posted my
solutions below with a little bit of commentary. You can access the problems
&lt;a href="https://www.facebook.com/hackercup/problems.php?round=742632349177460">here&lt;/a>.&lt;/p>
&lt;h2 id="cooking-the-books-15-points">Cooking the Books (15 points)&lt;/h2>
&lt;p>This was the easiest question. Since the constraints were so small, it suffices
to use brute force and try all possible swaps. Care has to be taken however to
make sure that a number never starts with 0.&lt;/p></description></item><item><title>Generating Power Set</title><link>https://sinhak.dev/posts/generating-power-set/</link><pubDate>Mon, 05 Jan 2015 00:00:00 +0000</pubDate><guid>https://sinhak.dev/posts/generating-power-set/</guid><description>&lt;p>Iterating over all possible subsets of a set is a problem that can arise not
only in competitive programming but also in day-to-day programming. While the
total number of possible subsets is quite huge (&lt;em>2^n&lt;/em> where &lt;em>n&lt;/em> is the
cardinality of the input set), often we want an algorithm that systematically
considers all subsets for small values of &lt;em>n&lt;/em>.&lt;/p>
&lt;p>A &lt;a href="http://en.wikipedia.org/wiki/Power_set">power set&lt;/a> is a set of all subsets
of a given input set. Often we may want to simply iterate over all members of
the power set, but sometimes (if we have enough memory) we may need the power
set itself. In the following post, I have attempted to present some algorithms
(with C++11 implementations) that solve both kinds of problems (simple
iteration and complete power set construction).&lt;/p></description></item><item><title>Implementing Service Oriented Architecture using Http is a horrible idea</title><link>https://sinhak.dev/posts/soa-using-http-considered-harmful/</link><pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate><guid>https://sinhak.dev/posts/soa-using-http-considered-harmful/</guid><description>&lt;p>&lt;a href="http://en.wikipedia.org/wiki/Service-oriented_architecture">Service Oriented Architecture&lt;/a>
is a commonly used design pattern in distributed and enterprise applications.
It involves the creation and use of independent &lt;em>services&lt;/em> that work together
to produce the desired result. The most important benefits, of course, are
separation of concerns and the ability to scale each service independent of
others, leading to a clean, modular design.&lt;/p>
&lt;p>A common problem faced during the design of a SOA system is the choice of
communication protocol. Ideally we want our services to communicate with each
other with minimum communication overhead. This involves:&lt;/p></description></item><item><title>The toughest interview question</title><link>https://sinhak.dev/posts/the-toughest-interview-question/</link><pubDate>Tue, 29 Jul 2014 00:00:00 +0000</pubDate><guid>https://sinhak.dev/posts/the-toughest-interview-question/</guid><description>&lt;p>What is the output of the following C code snippet?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>&lt;span style="color:#fabd2f">int&lt;/span> n &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>&lt;span style="color:#fabd2f">printf&lt;/span>(&lt;span style="color:#b8bb26">&amp;#34;%d %d %d&lt;/span>&lt;span style="color:#b8bb26">\n&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>, n&lt;span style="color:#fe8019">++&lt;/span>, &lt;span style="color:#fe8019">++&lt;/span>n, n&lt;span style="color:#fe8019">++&lt;/span> &lt;span style="color:#fe8019">+&lt;/span> &lt;span style="color:#fe8019">++&lt;/span>n);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a tricky question. Any attempt to answer this question requires either
a deep understanding of your compiler&amp;rsquo;s parser or a complete ignorance of C.
Even if you fall under the first category and know the ins and outs of your
favorite compiler, how do you know which is your &lt;em>interviewer&amp;rsquo;s&lt;/em> favorite
compiler?&lt;/p></description></item></channel></rss>