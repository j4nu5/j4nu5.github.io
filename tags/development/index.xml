<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on The Janus List</title><link>https://sinhak.dev/tags/development/</link><description>Recent content in Development on The Janus List</description><generator>Hugo</generator><language>en-us</language><copyright>Â© Kushagra Sinha</copyright><lastBuildDate>Sat, 10 Oct 2020 19:03:13 +0200</lastBuildDate><atom:link href="https://sinhak.dev/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>The Reliable Engineer</title><link>https://sinhak.dev/posts/the-reliable-engineer/</link><pubDate>Sat, 10 Oct 2020 19:03:13 +0200</pubDate><guid>https://sinhak.dev/posts/the-reliable-engineer/</guid><description>&lt;h2 id="what-is-_reliability_">What is &lt;em>Reliability&lt;/em>?&lt;/h2>
&lt;p>One of the lenses through which I view my job is as a &lt;em>service&lt;/em> that I provide
to my &lt;em>immediate&lt;/em> manager. This is different from any additional obligations
that I may have to my employer.&lt;br>
From this lens, I want to provide such a quality of service where my manager is
able to assign a task to me, and &lt;em>&lt;strong>forget about it&lt;/strong>&lt;/em>.&lt;br>
The extent to which I can meet this bar, is &lt;em>reliability&lt;/em>.&lt;/p></description></item><item><title>Const References to Temporary Objects</title><link>https://sinhak.dev/posts/const-reference-to-temporary-objects/</link><pubDate>Sun, 02 Sep 2018 18:24:40 +0200</pubDate><guid>https://sinhak.dev/posts/const-reference-to-temporary-objects/</guid><description>&lt;p>Consider the following code snippet:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#include&lt;/span> &lt;span style="color:#8ec07c;font-style:italic">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#8ec07c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>&lt;span style="color:#8ec07c">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>&lt;span style="color:#fabd2f">int&lt;/span> &lt;span style="color:#fabd2f">GetInt&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span> &lt;span style="color:#fabd2f">int&lt;/span> x &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span> &lt;span style="color:#fe8019">return&lt;/span> x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>&lt;span style="color:#fabd2f">int&lt;/span> &lt;span style="color:#fabd2f">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span> &lt;span style="color:#fe8019">const&lt;/span> &lt;span style="color:#fabd2f">int&lt;/span>&lt;span style="color:#fe8019">&amp;amp;&lt;/span> x &lt;span style="color:#fe8019">=&lt;/span> GetInt();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span> std&lt;span style="color:#fe8019">::&lt;/span>cout &lt;span style="color:#fe8019">&amp;lt;&amp;lt;&lt;/span> x &lt;span style="color:#fe8019">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#fe8019">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span> &lt;span style="color:#fe8019">return&lt;/span> &lt;span style="color:#d3869b">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In particular, pay attention to line #9. Is it guaranteed to be safe?&lt;/p></description></item><item><title>Pelican Setup</title><link>https://sinhak.dev/posts/pelican-setup/</link><pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate><guid>https://sinhak.dev/posts/pelican-setup/</guid><description>&lt;p>Install Pelican:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>sudo -H pip install pelican Markdown typogrify
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install Pelican themes&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>git clone --recursive https://github.com/getpelican/pelican-themes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>sudo /usr/local/bin/pelican-themes --install pelican-themes/Flex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span>sudo chmod &lt;span style="color:#d3869b">755&lt;/span> /usr/local/lib/python2.7/dist-packages/pelican/themes/Flex
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install Pelican plugins&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>git clone --recursive https://github.com/getpelican/pelican-plugins
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Fetch blog sources&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>git clone git@github.com:j4nu5/j4nu5.github.io.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>&lt;span style="color:#fabd2f">cd&lt;/span> j4nu5.github.io.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span>git fetch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span>git checkout &lt;span style="color:#fabd2f">source&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Setup for development&lt;/p></description></item><item><title>Facebook Hacker Cup 2015 Qualification Round Solutions</title><link>https://sinhak.dev/posts/facebook-hackercup-2015-qualifications/</link><pubDate>Mon, 12 Jan 2015 00:00:00 +0000</pubDate><guid>https://sinhak.dev/posts/facebook-hackercup-2015-qualifications/</guid><description>&lt;p>Facebook recently organized the qualification round of Hacker Cup 2015. They
posed some interesting problems and anyone who could get at least one problem
right can move to the next round.&lt;/p>
&lt;p>I managed to get a rank of 217, with a perfect score of 100. I have posted my
solutions below with a little bit of commentary. You can access the problems
&lt;a href="https://www.facebook.com/hackercup/problems.php?round=742632349177460">here&lt;/a>.&lt;/p>
&lt;h2 id="cooking-the-books-15-points">Cooking the Books (15 points)&lt;/h2>
&lt;p>This was the easiest question. Since the constraints were so small, it suffices
to use brute force and try all possible swaps. Care has to be taken however to
make sure that a number never starts with 0.&lt;/p></description></item><item><title>Abstract Classes and Factory Design Pattern in Python</title><link>https://sinhak.dev/posts/abstract-classes-and-factory-design-pattern-in-python/</link><pubDate>Thu, 19 Dec 2013 00:00:00 +0000</pubDate><guid>https://sinhak.dev/posts/abstract-classes-and-factory-design-pattern-in-python/</guid><description>&lt;p>&lt;a href="http://en.wikipedia.org/wiki/Class_(computer_programming)#Abstract_and_concrete">Abstract Classes&lt;/a>
are one of the most useful and important concepts in Object Oriented
Programming. I&amp;rsquo;ll attempt to illustrate their usefulness, and their usage in
Python 2.7 with the following (seemingly contrived) example:&lt;/p>
&lt;p>Let us say, you want/have to implement posting updates on Facebook using
Python. Your code might look something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>&lt;span style="color:#928374;font-style:italic"># Attempt 0: Bad code.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span>&lt;span style="color:#fe8019">def&lt;/span> &lt;span style="color:#fabd2f">facebook_share_init&lt;/span>(&lt;span style="color:#fe8019">*&lt;/span>args, &lt;span style="color:#fe8019">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span> &lt;span style="color:#928374;font-style:italic"># Initialize OAuth with facebook&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">5&lt;/span>&lt;span> &lt;span style="color:#928374;font-style:italic"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">7&lt;/span>&lt;span>&lt;span style="color:#fe8019">def&lt;/span> &lt;span style="color:#fabd2f">share_on_facebook&lt;/span>(&lt;span style="color:#fe8019">*&lt;/span>args, &lt;span style="color:#fe8019">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">8&lt;/span>&lt;span> &lt;span style="color:#928374;font-style:italic"># Post to Facebook&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">9&lt;/span>&lt;span> &lt;span style="color:#928374;font-style:italic"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It works and everyone is happy. Then one day, you decide to support posting
tweets in your application. You add the following:&lt;/p></description></item></channel></rss>