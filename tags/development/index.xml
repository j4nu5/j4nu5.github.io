<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on The Janus List</title>
    <link>https://www.j4nu5.com/tags/development/</link>
    <description>Recent content in Development on The Janus List</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Sep 2018 18:24:40 +0200</lastBuildDate>
    
	<atom:link href="https://www.j4nu5.com/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Const References to Temporary Objects</title>
      <link>https://www.j4nu5.com/posts/const-reference-to-temporary-objects/</link>
      <pubDate>Sun, 02 Sep 2018 18:24:40 +0200</pubDate>
      
      <guid>https://www.j4nu5.com/posts/const-reference-to-temporary-objects/</guid>
      <description>Consider the following code snippet:
1 2 3 4 5 6 7 8 9 10 11 12 13  #include &amp;lt;iostream&amp;gt; int GetInt() { int x = 1; return x; } int main() { const int&amp;amp; x = GetInt(); std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; return 0; }    In particular, pay attention to line #9. Is it guaranteed to be safe?
In this case, the answer is yes.</description>
    </item>
    
    <item>
      <title>Pelican Setup</title>
      <link>https://www.j4nu5.com/posts/pelican-setup/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0200</pubDate>
      
      <guid>https://www.j4nu5.com/posts/pelican-setup/</guid>
      <description>Install Pelican:
1  sudo -H pip install pelican Markdown typogrify   Install Pelican themes
1 2 3  git clone --recursive https://github.com/getpelican/pelican-themes sudo /usr/local/bin/pelican-themes --install pelican-themes/Flex sudo chmod 755 /usr/local/lib/python2.7/dist-packages/pelican/themes/Flex   Install Pelican plugins
1  git clone --recursive https://github.com/getpelican/pelican-plugins   Fetch blog sources
1 2 3 4  git clone git@github.com:j4nu5/j4nu5.github.io.git cd j4nu5.github.io.git git fetch git checkout source   Setup for development
1  mkdir cache output   Verify plugins root</description>
    </item>
    
    <item>
      <title>Facebook Hacker Cup 2015 Qualification Round Solutions</title>
      <link>https://www.j4nu5.com/posts/facebook-hackercup-2015-qualifications/</link>
      <pubDate>Mon, 12 Jan 2015 00:00:00 +0100</pubDate>
      
      <guid>https://www.j4nu5.com/posts/facebook-hackercup-2015-qualifications/</guid>
      <description>Facebook recently organized the qualification round of Hacker Cup 2015. They posed some interesting problems and anyone who could get at least one problem right can move to the next round.
I managed to get a rank of 217, with a perfect score of 100. I have posted my solutions below with a little bit of commentary. You can access the problems here.
Cooking the Books (15 points) This was the easiest question.</description>
    </item>
    
    <item>
      <title>Abstract Classes and Factory Design Pattern in Python</title>
      <link>https://www.j4nu5.com/posts/abstract-classes-and-factory-design-pattern-in-python/</link>
      <pubDate>Thu, 19 Dec 2013 00:00:00 +0100</pubDate>
      
      <guid>https://www.j4nu5.com/posts/abstract-classes-and-factory-design-pattern-in-python/</guid>
      <description>Abstract Classes are one of the most useful and important concepts in Object Oriented Programming. I&amp;rsquo;ll attempt to illustrate their usefulness, and their usage in Python 2.7 with the following (seemingly contrived) example:
Let us say, you want/have to implement posting updates on Facebook using Python. Your code might look something like this:
1 2 3 4 5 6 7 8 9  # Attempt 0: Bad code. def facebook_share_init(*args, **kwargs): # Initialize OAuth with facebook # .</description>
    </item>
    
  </channel>
</rss>